ALU

---------Behavioral code-----------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity ALU is
    Port (  A : in  STD_LOGIC_VECTOR (3 downto 0);
           B : in  STD_LOGIC_VECTOR (3 downto 0);
           SEL : in  STD_LOGIC_VECTOR (3 downto 0);
           Y : out  STD_LOGIC_VECTOR (3 downto 0));
end ALU;

architecture Behavioral of ALU is

begin
process(A,B,SEL)
begin

case SEL is
	when "0000" => Y <=  A and B;
	when "0001" => Y <= A nand B;
	when "0010" => Y <= A or B;
	when others => NULL;
	end case;
	end process;
end Behavioral;

-----TB_code-------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL; 
ENTITY ALU_TB IS
END ALU_TB; 
ARCHITECTURE behavior OF ALU_TB IS  
    COMPONENT ALU
    PORT(
         A : IN  std_logic_vector(3 downto 0);
         B : IN  std_logic_vector(3 downto 0);
         SEL : IN  std_logic_vector(3 downto 0);
         Y : OUT  std_logic_vector(3 downto 0)
        );
    END COMPONENT;
   --Inputs
   signal A : std_logic_vector(3 downto 0) := (others => '0');
   signal B : std_logic_vector(3 downto 0) := (others => '0');
   signal SEL : std_logic_vector(3 downto 0) := (others => '0');
 	--Outputs
   signal Y : std_logic_vector(3 downto 0);
 
BEGIN
    uut: ALU PORT MAP (
          A => A,
          B => B,
          SEL => SEL,
          Y => Y
        ); 
   -- Stimulus process
   stim_proc: process
   begin		
	A<="0101"; B<="0101";
		SEL <="0000";  wait for 100 ns;	
		
		SEL <="0001"; wait for 100 ns;	
		
		SEL <="0010";   wait for 100 ns;	
		
		A<="1101"; B<="1101";
		SEL <="0000";  wait for 100 ns;	
		
		SEL <="0001";  wait for 100 ns;	
		SEL <="0010";  wait for 100 ns;	
     wait;
   end process;

END;
-----------------------------------------------------------------
-----------------------------------------------------------------
Encoder

---------------Behavioral code----------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity encoder is
    Port ( A : in  STD_LOGIC_VECTOR (3 downto 0);
           B : out  STD_LOGIC_VECTOR (1 downto 0));

end encoder;

architecture Behavioral of encoder is
begin
process(a)

	begin
	case A is
		when "0001" => B <= "00"; 
		when "0010" => B <= "01"; 
		when "0100" => B <= "10"; 
		when "1000" => B <= "11"; 
		when others => B <= "ZZ";
	end case;
end process;
end Behavioral;

-------------TB_code-------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY encoder_TB IS
END encoder_TB;
 
ARCHITECTURE behavior OF encoder_TB IS 
  
    COMPONENT encoder
    PORT(
         A : IN  std_logic_vector(3 downto 0);
         B : OUT  std_logic_vector(1 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal A : std_logic_vector(3 downto 0) := (others => '0');

 	--Outputs
   signal B : std_logic_vector(1 downto 0);
 
BEGIN

   uut: encoder PORT MAP (
          A => A,
          B => B
        );
   -- Stimulus process
   stim_proc: process
   begin	
	a <= "0000";
 wait for 100 ns;
 a <= "0001";
 wait for 100 ns;
 a <= "0010";
 wait for 100 ns;
a <= "0100";
wait for 100 ns;
 a <= "1000";
wait for 100 ns;
      wait;
   end process;
END;
-----------------------------------------------------------------
-----------------------------------------------------------------
Decoder

-------------------Behavioral code----------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity decoder is
    Port ( a : in  STD_LOGIC_VECTOR (1 downto 0);
           b : out  STD_LOGIC_VECTOR (3 downto 0));
end decoder;

architecture Behavioral of decoder is

begin
process(a)
begin
case a is
when "00" => b <= "0001"; 
when "01" => b <= "0010"; 
when "10" => b <= "0100"; 
when "11" => b <= "1000";
when others => b <= "ZZZZ";
end case;
end process;
end Behavioral;

-----------------TB_code-----------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
ENTITY decoder_TB IS
END decoder_TB;
 
ARCHITECTURE behavior OF decoder_TB IS 
 
    COMPONENT decoder
    PORT(
         a : IN  std_logic_vector(1 downto 0);
         b : OUT  std_logic_vector(3 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal a : std_logic_vector(1 downto 0) := (others => '0');

 	--Outputs
   signal b : std_logic_vector(3 downto 0);
 
BEGIN
   uut: decoder PORT MAP (
          a => a,
          b => b
        );
		  
   -- Stimulus process
   stim_proc: process
   begin		
	a <= "00"; 	wait for 100 ns;
 		a <= "01";	wait for 100 ns;
 		a <= "10";	wait for 100 ns;
 		a <= "11";	wait for 100 ns;
      wait;
   end process;

END;
-----------------------------------------------------------------
-----------------------------------------------------------------
Half adder

-----------Behavioral code-------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity HA_and_FA is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           SUM : out  STD_LOGIC;
           CARRY : out  STD_LOGIC);
end HA_and_FA;

architecture Behavioral of HA_and_FA is

begin
SUM<=  A XOR B;
CARRY<= A AND B;

end Behavioral;

---------------test bench--------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY halfAdder_TB IS
END halfAdder_TB;
ARCHITECTURE behavior OF halfAdder_TB IS
    COMPONENT HA_and_FA
    PORT(
         A : IN  std_logic;
         B : IN  std_logic;
         SUM : OUT  std_logic;
         CARRY : OUT  std_logic
        );
    END COMPONENT;
--Inputs
   signal A : std_logic := '0';
   signal B : std_logic := '0';

 	--Outputs
   signal SUM : std_logic;
   signal CARRY : std_logic;

BEGIN 
	-- Instantiate the Unit Under Test (UUT)
   uut: HA_and_FA PORT MAP (
          A => A,
          B => B,
          SUM => SUM,
          CARRY => CARRY
        );

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      	
A<='0'; B<='0';
      	wait for 100 ns;	
		
	A<='0'; B<='1';
   	wait for 100 ns;	
		
	A<='1'; B<='0';
     	 wait for 100 ns;	
		
	A<='1'; B<='1';
     	wait for 100 ns;	
      wait;
   end process;

END;
-----------------------------------------------------------------
-----------------------------------------------------------------
Full adder

---------Behavioral code--------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity fullAdder is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           Cin : in  STD_LOGIC;
           SUM : out  STD_LOGIC;
           Cout : out  STD_LOGIC);
end fullAdder;
architecture Behavioral of fullAdder is
begin
SUM<= A XOR B XOR Cin;
Cout<= ( A AND B) OR ( B AND Cin) OR ( Cin AND A);
end Behavioral;

------------TB code----------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL; 
ENTITY fullAdder_TB IS
END fullAdder_TB; 
ARCHITECTURE behavior OF fullAdder_TB IS   
    COMPONENT fullAdder
    PORT(
         A : IN  std_logic;
         B : IN  std_logic;
         Cin : IN  std_logic;
         SUM : OUT  std_logic;
         Cout : OUT  std_logic
        );
    END COMPONENT;
    --Inputs
   signal A : std_logic := '0';
   signal B : std_logic := '0';
   signal Cin : std_logic := '0';

 	--Outputs
   signal SUM : std_logic;
   signal Cout : std_logic; 
BEGIN 
   uut: fullAdder PORT MAP (
          A => A,
          B => B,
          Cin => Cin,
          SUM => SUM,
          Cout => Cout
        );

   -- Stimulus process
   stim_proc: process
   begin		
      A<='0'; B<='0'; Cin<='0';
wait for 100 ns;	
		
	A<='0'; B<='0'; Cin<='1';
	wait for 100 ns;	
	
A<='0'; B<='1'; Cin<='0';
   	wait for 100 ns;	
		
	A<='0'; B<='1'; Cin<='1';
   	wait for 100 ns;	

	A<='1'; B<='0'; Cin<='0';
     	 wait for 100 ns;	
		 
	A<='1'; B<='0'; Cin<='1';
     	 wait for 100 ns;	
		
	A<='1'; B<='1'; Cin<='0';
     	wait for 100 ns;	
	A<='1'; B<='1'; Cin<='1';
     	wait for 100 ns;	
      wait;
   end process;
END;
-----------------------------------------------------------------
-----------------------------------------------------------------
4x1 mux

--------------Behavioral code--------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Mux_4X1 is
    Port ( i0 : in  STD_LOGIC;
           i1 : in  STD_LOGIC;
           i2 : in  STD_LOGIC;
           i3 : in  STD_LOGIC;
           s : in  STD_LOGIC_VECTOR (1 downto 0);
           Y : out  STD_LOGIC);
end Mux_4X1;

architecture Behavioral of Mux_4X1 is

begin
Y<= i0 when s="00" else
    i1 when s="01" else
    i2 when s="10" else
    i3;

end Behavioral;

-----------------TB_code--------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
ENTITY mux_4x1_TB IS
END mux_4x1_TB; 
ARCHITECTURE behavior OF mux_4x1_TB IS  
    COMPONENT Mux_4X1
    PORT(
         i0 : IN  std_logic;
         i1 : IN  std_logic;
         i2 : IN  std_logic;
         i3 : IN  std_logic;
         s : IN  std_logic_vector(1 downto 0);
         Y : OUT  std_logic
        );
    END COMPONENT;
   --Inputs
   signal i0 : std_logic := '0';
   signal i1 : std_logic := '0';
   signal i2 : std_logic := '0';
   signal i3 : std_logic := '0';
   signal s : std_logic_vector(1 downto 0) := (others => '0');
 	--Outputs
   signal Y : std_logic; 
BEGIN 
   uut: Mux_4X1 PORT MAP (
          i0 => i0,
          i1 => i1,
          i2 => i2,
          i3 => i3,
          s => s,
          Y => Y
        );

   -- Stimulus process
   stim_proc: process
   begin		  
  I0<='1';
I1<='0';
I2<='0';
I3<='1';
s<="00";
wait for 100ns;
s<="01";
wait for 100ns;
s<="10";
wait for 100ns;
s<="11";
wait for 100ns;
    --wait;
   end process;
END;
-----------------------------------------------------------------
-----------------------------------------------------------------
Demux_4x1

-------------------Behavioral code----------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DeMux_4x1 is
    Port ( I : in  STD_LOGIC;
           S : in  STD_LOGIC_VECTOR (1 downto 0);
           O : out  STD_LOGIC_VECTOR (3 downto 0));
end DeMux_4x1;

architecture Behavioral of DeMux_4x1 is

begin
O(0) <= (I AND NOT S(0) AND NOT S(1));
O(1) <= (I AND NOT S(0) AND S(1));
O(2) <= (I AND S(0) AND NOT S(1));
O(3) <= (I AND S(0) AND S(1));
end Behavioral;

------------------TB_code-------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL; 
ENTITY DeMux_4x1_TB IS
END DeMux_4x1_TB; 
ARCHITECTURE behavior OF DeMux_4x1_TB IS  
    COMPONENT DeMux_4x1
    PORT(
         I : IN  std_logic;
         S : IN  std_logic_vector(1 downto 0);
         O : OUT  std_logic_vector(3 downto 0)
        );
    END COMPONENT;
     --Inputs
   signal I : std_logic := '0';
   signal S : std_logic_vector(1 downto 0) := (others => '0');

 	--Outputs
   signal O : std_logic_vector(3 downto 0);
 
BEGIN
   uut: DeMux_4x1 PORT MAP (
          I => I,
          S => S,
          O => O
        );

   -- Stimulus process
   stim_proc: process
   

begin		
    I <= '1';
			S(0) <= '0'; 		
S(1) <= '0';
 			wait for 100 ns;
 
			S(0) <= '0'; 
			S(1) <= '1';
 			wait for 100 ns;
 
			S(0) <= '1'; 
			S(1) <= '0';
 			wait for 100 ns;
 
			S(0) <= '1'; 
			S(1) <= '1';
 			wait for 100 ns;
      wait;
   end process;
END;
-----------------------------------------------------------------
-----------------------------------------------------------------
And gate

-------------------behavioral code------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity logicGates is
    Port ( a : in  STD_LOGIC;
           b : in  STD_LOGIC;
           y : out  STD_LOGIC);
end logicGates;

architecture Behavioral of logicGates is

begin
y <= a and b; --and gate
-- y <= a or b; --or gate 
-- y<= not(a) --not gate

end Behavioral;

-----------------TB_code------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY andGate_TB IS   --change the name here while writing into copy / --orGate_TB
END andGate_TB;  --orGate_TB
 
ARCHITECTURE behavior OF andGate_TB IS   -- orGate_TB
 
    COMPONENT logicGates
    PORT(
         a : IN  std_logic;
         b : IN  std_logic;
         y : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal a : std_logic := '0';
   signal b : std_logic := '0';

 	--Outputs
   signal y : std_logic;
 
BEGIN 
 uut: logicGates PORT MAP (
          a => a,
          b => b,
          y => y
        );

    stim_proc: process
   begin		
      a<='0';
   b<='0';
	-- hold reset state for 100 ns.
      wait for 100 ns;	


   a<='0';
   b<='1';
	-- hold reset state for 100 ns.
      wait for 100 ns;	

 	
   a<='1';
   b<='0';
	-- hold reset state for 100 ns.
      wait for 100 ns;	

  	
   a<='1';
   b<='1';
	-- hold reset state for 100 ns.
      wait for 100 ns;	


      wait;
   end process;

END;

-----------------test bench for NOT gate--------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
ENTITY notGate_TB IS
END notGate_TB;
 
ARCHITECTURE behavior OF notGate_TB IS 
 
    COMPONENT notGate
    PORT(
         a : IN  std_logic;
         y : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal a : std_logic := '0';

 	--Outputs
   signal y : std_logic;
 
BEGIN
   uut: notGate PORT MAP (
          a => a,
          y => y
        );
 
   stim_proc: process
   begin	
	
	a<='0';
      wait for 100 ns;	
  
   a<='1';
      wait for 100 ns;	

      wait;
   end process;

END;





